buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// Configuring the wrapper, the new way (since Gradle 4.8)
// see https://docs.gradle.org/current/userguide/gradle_wrapper.html#customizing_wrapper
wrapper{
    gradleVersion = '5.1'
    distributionType = Wrapper.DistributionType.BIN
}

bootJar {
    baseName = 'uamdc'
    version =  '1.0'
}

repositories {
    mavenCentral()
    mavenLocal()  //look in home/.m2/repo for self-made leafs
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


task updateAppPropertiesWithBuildId {
    doLast{
        description = "Determine the build id from git"
        def buildIdOut = new ByteArrayOutputStream()
        def errorsOut = new ByteArrayOutputStream()
        def extraInfo = ""
        try {
            exec {
                // formatted as epoch timestamp (git ct)
                standardOutput = buildIdOut
                errorOutput = errorsOut
                commandLine 'git', 'log', '-1', '--pretty=format:%h', 'HEAD'
            }
        } catch (Exception e) {
            buildIdOut.write('0'.getBytes())
            if (errorsOut.toString().contains("Not a git repository")) {
                extraInfo = "(Not a git repository and/or no commits found)\n" +
                        "Type: git init; git add *; git commit *;"
            }
        }
        // or just generate the time
        def tag_version = "";
        if (project.hasProperty('tag')){
            tag_version = "$tag";
        }
        if (tag_version == "") {
            tag_version = new Date().format("YY.MM");
            tag_version = tag_version.toString();
        }
        def buildTime = new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone('UTC'))
        def f2 = new File('src/main/resources/application.yml');
        String tmp1 = f2.text.replaceAll(/BUILD_ID/, buildIdOut.toString());
        String tmp2 = tmp1.replaceAll(/BUILD_TIME/, buildTime.toString());
        String tmp3 = tmp2.replaceAll(/BUILD_DATE/, "\"" + tag_version + "\"");
        new File( 'src/main/resources/application.yml' ).write( tmp3, 'UTF-8' );
    }
}

task copyAppProfile(type: Copy) {
    from ('../../../utm-security/springProfiles/uds/application.yml')
    into ('src/main/resources/config')
}


test {
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true // at runtime outputs all
    }
    reports.junitXml.enabled = false
    reports.html.enabled = true
}



tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn copyAppProfile
}


dependencies {
    compile "io.springfox:springfox-swagger2:2.9.2"
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    compile group: 'org.springframework.security.oauth.boot', name: 'spring-security-oauth2-autoconfigure', version: '2.1.4.RELEASE'
    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.3.4.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-jwt', version: '1.0.9.RELEASE'

    compile group: 'gov.nasa.utm', name: 'utmCommons', version: 'v1'
    compile group: 'gov.nasa.utm', name: 'aspects', version: 'v4'
    compile group: 'org.codehaus.janino', name: 'janino', version: '3.0.6'
    // String edit distance/similarity https://mvnrepository.com/artifact/org.apache.commons/commons-text
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.7'

    testCompile("org.springframework.boot:spring-boot-starter-test")

}
