openapi: 3.0.0
info:
  title: NUP Operator API
  version: v4
  description: Endpoints for managing Operational Data with models based on the
    v4 operator-api models.
tags:
  - name: Message Data Types
    description: "Intent, Inform, Alert and Free message schemas"
  - name: Operations
    description: Add and view operations
  - name: Positions
    description: Add and view operation positions
  - name: Messages
    description: Add and view operation messages
  - name: Geography Data Types
    description: Geographies
  - name: Subscription Points
    description: Subscribe to notifications
paths:
  /messages:
    get:
      tags:
        - Messages
      summary: Get Operator Messages.
      description: >-
        You can specify ASC and DESC (or asc/desc) as follows:
        /operator/messages?sort=DESC You can specify a time window as follows:
        /operator/messages/?limit=44&sent_time_after=2038-01-01T07:58:20.000Z&sent_time_before=2038-01-01T07:58:30.000Z
      parameters:
        - name: sort
          in: query
          description: sort
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
        - name: sent_time_before
          in: query
          description: Returns Message with sent_time before or equal to the given time
          required: false
          schema:
            type: string
            format: date-time
            minLength: 25
            maxLength: 25
        - name: sent_time_after
          in: query
          description: Returns Messages with sent_time after or equal to the given time
          required: false
          schema:
            type: string
            format: date-time
            minLength: 25
            maxLength: 25
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OperResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    post:
      tags:
        - Messages
      summary: add Message for a Gufi
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
        description: msg
        required: true
  "/messages/{gufi}":
    get:
      tags:
        - Messages
      summary: get Messages for a Gufi
      parameters:
        - name: gufi
          in: path
          description: gufi
          required: true
          schema:
            type: string
        - name: sort
          in: query
          description: sort
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /operations:
    get:
      tags:
        - A. Required Endpoints
      summary: Request information regarding Operations
      description: >-
        Allows querying for Operation data. Returns an empty list if the query
        returns nothing.
      parameters:
        - name: registration_id
          in: query
          description: >-
            Return only results that match the registration_ids provided.  Only
            operations that have not completed or have completed within the last
            24 hours are required to be returned. If multiple IDs are provided,
            they must be unique and separated by commas.
          style: form
          schema:
            type: array
            items:
              type: string
              format: uuid
              minLength: 36
              maxLength: 36
            minItems: 1
            maxItems: 5
            uniqueItems: true
        - name: submit_time
          in: query
          description: >-
            A single date-time value that will be used to provide all operations
            submitted AFTER that time.
          required: false
          schema:
            type: string
            format: date-time
            minLength: 20
            maxLength: 25
        - name: state
          in: query
          description: >-
            Return only operations that are in the states provided.  Comma
            separated list of states.
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
              enum:
                - ACCEPTED
                - ACTIVATED
                - CLOSED
                - NONCONFORMING
                - ROGUE
            minItems: 1
            maxItems: 5
            uniqueItems: true
        - name: distance
          in: query
          description: >-
            Distance from reference_point to find operations. Ignored if
            reference_point is not provided.  Units are feet.  Returns all
            operations that have any operation_volumes whose 2D horizontal
            dimensions interesect the 2D circle defined by distance and
            reference_point.  Default value only has meaning when
            reference_point parameter is provided.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 60762
            default: 300
        - name: reference_point
          in: query
          description: >-
            A single point used to find all operations within some distance from
            that point. Returns all operations that have any operation_volumes
            whose 2D horizontal dimensions interesect the 2D circle defined by
            distance and reference_point.  When distance is excluded and
            reference_point is included, uses default value (300ft) for
            distance. Described as a GeoJSON position.  The value is equivalent
            to what would be seen in the "coordinates" field for a GeoJSON Point
            object.  See https://tools.ietf.org/html/rfc7946#section-3.1.1 for
            further reference.  Example would be reference_point=[-122.056364,
            37.414371] (URL safe:
            reference_point%3D%5B-122.056364%2C%2037.414371%5D). As per GeoJSON
            spec, this is long-lat format in the WGS84 reference system. MUST
            NOT include a third coordinate element, strictly 2D.
          required: false
          schema:
            type: string
            format: geojson-position
        - name: sort
          in: query
          description: >-
            Field name(s) to use for sorting records. If multiple fields are
            provided, the sorting is based on the ordered priorty of that list.
            Note that the enum provided designates the required fields that a
            USS must support. A USS may decide to support additional fields, but
            how that USS communicates that option is out of scope for this API
            document.
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
              enum:
                - submit_time
                - gufi
                - state
            minItems: 1
            maxItems: 3
            default: submit_time
        - name: sort_increasing
          in: query
          description: >-
            For optional use with the 'sort' parameter. If 'sort' is not
            provided, then 'sort_increasing' will be ignored. Boolean value.  If
            multiple fields are provided in the 'sort' parameter, this boolean
            value will apply to all of them.
          required: false
          schema:
            type: boolean
            default: true
        - name: limit
          in: query
          description: The maximum number or records to return.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            exclusiveMinimum: false
            exclusiveMaximum: false
            default: 10
        - name: offset
          in: query
          description: The index from which to begin the list of returned records.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            exclusiveMinimum: false
            default: 0
      responses:
        "200":
          description: Successful data request. Response includes requested data.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Operation"
        "400":
          description: Bad request. Typically validation error. Fix your request and retry.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "401":
          description: Invalid or missing access_token provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "403":
          description: >-
            Forbidden. Do not retry with same access token. Reason not provided,
            but do you have the right scopes?
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "423":
          description: The requested data are in a transition state. Please retry request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "429":
          description: Too many recent requests from you. Wait to make further queries.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
    post:
      tags:
        - Operations
      summary: add an operation
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Operation"
        description: model
        required: true
  "/operations/{gufi}":
    get:
      tags:
        - A. Required Endpoints
      summary: Retrieve an operation by GUFI.
      description: Retrieve an operation by GUFI.  Returns 404 if gufi is not found.
      parameters:
        - in: path
          name: gufi
          required: true
          description: GUFI of the operation being requested.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Operation"
        "400":
          description: Bad request. Typically validation error. Fix your request and retry.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "401":
          description: Invalid or missing access_token provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "403":
          description: >-
            Forbidden. Do not retry with same access token. Reason not provided,
            but do you have the right scopes?
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "423":
          description: The requested data are in a transition state. Please retry request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
    put:
      tags:
        - A. Required Endpoints
      summary: "Announce a new, or update an already announced operation."
      description: >-
        Announce an Operation to another USS, either initial Operation or an
        update to the Operation. The Operation's owner creates the ID.
      parameters:
        - in: path
          name: gufi
          required: true
          description: PUT operation by gufi
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "400":
          description: Bad request. Typically validation error. Fix your request and retry.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "401":
          description: Invalid or missing access_token provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "403":
          description: Forbidden. Data and or token do not meet security requirements.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "409":
          description: >-
            Conflict. This USS has an Operation that intersects. 'messages'
            field in UTMRestResponse will contain list of GUFIs of length at
            least 1 indicating the conflicting Operation(s).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "429":
          description: Too many recent requests from you. Wait to make further queries.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Operation"
        description: >-
          Operational plan with the following properties:
          1. Contains a valid uss_operation_id.
          2. time_available_end value that is in the future.
          3. For and update to an Operation, date-time fields that are in the past MUST NOT be modified.
          4. On the first announcement of an Operation, submit_time SHOULD be equal to update_time.
          5. submit_time MUST be less than or equal to update_time.
          5. {gufi} path parameter MUST equal Operation.gufi of the body data
          6. Operation.uss_id == access_token.sub
          7. Operation.priority_elements.status MUST NOT be PUBLIC_SAFETY.
          8. Other rules for a USS Operation PUT are satisfied.
        required: true
  /positions:
    get:
      tags:
        - Positions
      summary: GET Positions
      description: >-
        You can specify ASC and DESC (or asc/desc) as follows:
        https://host.nasa.gov/nuss/operator/positions?sort=DESC You can also
        specify limit and offset.
      parameters:
        - name: sort
          in: query
          description: sort
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: >-
            returns empty list if no positions are found.  The return list can
            be large so use limit and offset.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Position"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
    post:
      tags:
        - Positions
      summary: addPosition
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Position"
        description: flight position from operator
        required: true
  "/positions/{gufi}":
    get:
      tags:
        - Positions
      summary: getPositionsForGufi
      parameters:
        - name: gufi
          in: path
          description: gufi
          required: true
          schema:
            type: string
        - name: fields
          in: query
          description: fields
          required: false
          schema:
            type: string
        - name: q
          in: query
          description: q
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: sort
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: >-
            returns positions for GUFI. returns empty list if no positions are
            found.  The return list can be large so use limit and offset.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Position"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
servers:
  - url: "https://some.host/operator/v4"
components:
  schemas:
    Message:
      type: object
      required:
        - oper_message_type
      properties:
        message_id:
          type: string
          format: uuid
          example: 00000000-0000-4444-8888-FEEDDEADBEEF
          minLength: 36
          maxLength: 36
          pattern: >-
            ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-4[0-9a-fA-F]{3}\-[8-b][0-9a-fA-F]{3}\-[0-9a-fA-F]{12}$
        gufi:
          type: string
          format: uuid
          example: 00000000-0000-4444-8888-FEEDDEADBEEF
          description: The GUFI for the operation referenced in this message.  UUIDv4.
          minLength: 36
          maxLength: 36
          pattern: >-
            ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-4[0-9a-fA-F]{3}\-[8-b][0-9a-fA-F]{3}\-[0-9a-fA-F]{12}$
        time_sent:
          type: string
          format: date-time
          example: "2015-08-20T14:11:56.118Z"
          description: Time the message was generated by the origin.
          x-utm-data-accessibility: OPERATIONAL
        severity:
          $ref: "#/components/schemas/severity"
        message_type:
          type: string
          description: |-
            1. OPERATOR_INFORM_ACCEPTED
              This operation was in PROPOSED state and has transitioned to the
              ACCEPTED state.
            2. OPERATOR_INFORM_REJECTED
              This operation was in PROPOSED state and has rejected to the
              CLOSED state due to reasons like intersecting existing operations
              or failed negotiations.
          enum:
            - OPERATOR_INFORM_ACCEPTED
            - OPERATOR_INFORM_REJECTED
            - OPERATOR_INFORM_ACTIVATED
            - OPERATOR_INFORM_NONCONFORMING
            - OPERATOR_INFORM_ROGUE
            - OPERATOR_INFORM_CLOSED
            - OPERATOR_INTENT_ALL_CLEAR
            - OPERATOR_INTENT_CLOSE
            - OPERATOR_INTENT_CANCEL
            - OPERATOR_INTENT_ABORT
            - OPERATOR_ALERT_LOST_COMM
        last_known_position:
          $ref: "#/components/schemas/Position"
        contingency:
          $ref: "#/components/schemas/ContingencyPlan"
        free_text:
          type: string
          description: >-
            Any additional information. Note that this is for human consumption.
            All time critical elements should be captured in the other data
            fields for easier consumption by other automated systems.
          maxLength: 1000
      description: >-
        A UTM operator message. Used to make other stakeholders aware about an
        issue.  The noted required fields are required for all UtmOperMessages,
        however there are fields that are contextually required depending on the
        type of message. Please see the descriptions provided with each field.
      example:
        message_id: 00000000-0000-4444-8888-CAFEBEEFF00D
        time_sent: "2015-08-20T14:11:57.345Z"
        severity: NOTICE
        message_type: OPERATION_CLOSED
        gufi: 00000000-0000-4444-8888-FEEDDEADBEEF
        free_text: "Cool flight, bro"
    Operation:
      required:
        - contact
        - contingency_plans
        - controller_location
        - faa_rule
        - gufi
        - operation_volumes
        - state
        - submit_time
        - update_time
      type: object
      properties:
        gufi:
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-4[0-9a-fA-F]{3}\-[8-b][0-9a-fA-F]{3}\-[0-9a-fA-F]{12}$
          type: string
          format: uuid
          example: 00000000-0000-4444-8888-feeddeadbeef
          x-utm-data-accessibility: PUBLIC
        api_version:
          type: string
          description: version # of api endpoint.
          x-utm-data-accessibility: OPERATIONAL
        user_id:
          type: string
          description: operator user id.
          x-utm-data-accessibility: OPERATIONAL
        submit_time:
          maxLength: 24
          minLength: 24
          pattern: ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$
          type: string
          description: |-
            Time that this Operation was first announced to the USS Network in any way.  For GUD, this means when you first write to the grid.  For traditional discovery, this means the first time you announce to your LUN.
            The submit_time value MUST remain constant for each recipient of the announcement since this value is potentially part of a signature of the Operation plan in some cases.  So, when data (or references to the data) are written to the grid, the same data are to be sent, as required, to other stakeholders (e.g. other USSs).  This means that if there is a 500ms difference in the time that you send and get confirmation from the grid, you DO NOT update the submit_time when sending to the USSs after that. When the operation is announced for the first time, update_time MUST be equal to submit_time. When an operation is modified (updated), update_time MUST be greater than submit_time.
            Similarly, for traditional discovery, if there is a delay in sending the data to one LUN member versus another, this field is NOT updated in between as we want each stakeholder to ultimately receive the same data and (potentially) the same signature of the data.
          format: date-time
          example: 2015-08-20T14:11:56.118Z
          x-utm-data-accessibility: OPERATIONAL
        aircraft_comments:
          maxLength: 1000
          type: string
          description:
            Informative text about the aircraft. Not used by the UTM System.
            Only for human stakeholders.
          default: NOT PROVIDED
          x-utm-data-accessibility: SAFETY
        flight_comments:
          maxLength: 1000
          type: string
          description:
            Informative text about the operation. Not used by the UTM System.
            Only for human stakeholders.
          default: NOT PROVIDED
          x-utm-data-accessibility: SAFETY
        volumes_description:
          maxLength: 1000
          type: string
          description:
            Informative text about the operational volumes. Not used by
            the UTM System. Only for human stakeholders.
          default: NOT PROVIDED
          x-utm-data-accessibility: SAFETY
        uas_registrations:
          maxItems: 1000
          minItems: 1
          type: array
          description: |-
            The registration data for the vehicle(s) to be used in this Operation. Note that this is an array to allow for future operations involving multiple vehicles (e.g. 'swarms' or tandem inspections).
            The uas_registrations array MUST NOT be used as a list of potential vehicles for this Operation.
            If the vehicle data changes prior to an Operation, an update to the plan may be submitted with the updated vehicle information. Providing multiple uas_registrations in this manner implies that all vehicles will conform to the provided operation volumes.
          items:
            $ref: "#/components/schemas/UasRegistration"
          x-utm-data-accessibility: SAFETY
        airspace_authorization:
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-4[0-9a-fA-F]{3}\-[8-b][0-9a-fA-F]{3}\-[0-9a-fA-F]{12}$
          type: string
          format: uuid
          example: 00000000-0000-4444-8888-feeddeadbeef
          x-utm-data-accessibility: SAFETY
        flight_number:
          maxLength: 100
          type: string
          description: Optional. For use by USS for identification purposes.
          x-utm-data-accessibility: OPERATIONAL
        contact:
          $ref: "#/components/schemas/PersonOrOrganization"
        state:
          type: string
          description: |-
            The current state of the operation.  Must be maintained by the USS. Some additional details in the USS Specification.
            0. PROPOSED
              This operation is not yet ACCEPTED.  It may be awaiting information
              from the operator, it may be in conflict with another ACCEPTED or
              ACTIVATED operation and undergoing a negotiation process, or for
              some other reason it is not yet able to be declared ACCEPTED.
            1. ACCEPTED
              This operation has been deemed ACCEPTED by the supporting USS. This
              implies that the operation meets the requirements for operating in
              the airspace based on the type of operation submitted.
            2. ACTIVATED
              This operation is active. The transition from ACCEPTED to ACTIVATED
              is not an announced transition. The transition is implied based on
              the submitted start time of the operation (i.e. the
              effective_time_begin of the first OperationVolume). Note that an
              ACTIVATED operation is not necessarily airborne, but is assumed
              to be "using" the OperationVolumes that it has announced.
            3. CLOSED
              This operation is closed. It is not airborne and will not become
              airborne again. If the UAS and the crew will fly again, it would
              need to be as a new operation. A USS may announce the closure of any
              operation, but is not required to announce unless the operation was
              ROGUE or NONCONFORMING.
            4. NONCONFORMING
              See USS Specification for requirements to transition to this state.
            5. ROGUE
              See USS Specification for requirements to transition to this state.

            If ordering of states is required for any purpose, they shall be ordered as follows:
              PROPOSED < ACCEPTED < ACTIVATED < CLOSED < NONCONFORMING < ROGUE
          enum:
            - PROPOSED
            - ACCEPTED
            - ACTIVATED
            - CLOSED
            - NONCONFORMING
            - ROGUE
          x-utm-data-accessibility: OPERATIONAL
        controller_location:
          $ref: "#/components/schemas/Point"
        gcs_location:
          $ref: "#/components/schemas/Point"
        contingency_plans:
          maxItems: 250
          minItems: 1
          type: array
          description:
            An array of ContingencyPlans wherein this operation may land
            if needed/required during operation. Aids in planning and communication
            during the execution of a contingency. An Operation MUST have least one
            Contingency Plan (CP) per Operation Volume, therefore the CP list size
            must be greater than or equal to the OpVol list size.
          items:
            $ref: "#/components/schemas/ContingencyPlan"
          x-utm-data-accessibility: OPERATIONAL
        faa_rule:
          type: string
          description: |-
            1. PART_107
              The operation follows FAA rule 107. Submission of such operations is mandatory
            2. PART_107X
              In general, operations are 107X if they are doing something that would require a waiver under current 107 rules. Submission of such operations is mandatory.
            3. PART_101E
              Submission of 101E would be required if operation is within 5 statute miles of an airport. Optional otherwise.
            4. OTHER
              Placeholder for other types of operations.
          enum:
            - PART_107
            - PART_107X
            - PART_101E
            - OTHER
          x-utm-data-accessibility: OPERATIONAL
        priority_elements:
          $ref: "#/components/schemas/PriorityElements"
        operation_volumes:
          maxItems: 250
          minItems: 1
          type: array
          description: |-
            The actual geographical information for the operation.
            A note on "intersection":
              Note 2: All of the terms "crosses", "within", "touches" imply
              intersection. I can track down a source for this definition
              (probably OGC), but for now, you can see it illustrated in the
              description for PostGIS intersection:
                https://postgis.net/docs/ST_Intersects.html

            Validation of the array must include the following checks:
              1. The array of operation volumes MUST have minimum length of 1.
              2. The array of operation volumes MUST have maximum length of 250.
              3.  Each operation volume MUST have non-zero 4D volume
                (i.e. each of the 4 dimensions much be > 0 in magnitude).
              4. Volume intersection must pass the following checks:
                a. When ordered by ordinal values, a succeeding operation volume
                must have a 2D or 3D intersection in 3D space with its immediately
                preceding operation volume.  Note that a 2D intersection in 3D
                space implies two volumes that "touch" and the intersection has 2D
                area.  Sharing just an edge would not qualify.  3D volumes that
                don't touch at all would not qualify, even if they would intersect
                when projected into 2D space (e.g. if "looking down" on the two
                volumes).
                b. When ordered by ordinal values, a succeeding operation volume
                must have a non-negative temporal intersection with its
                immediately preceding operation volume (Note we'd calculate this
                by t1-t2 where t1 is the preceding operation volume end time and
                t2 is the succeeding operation volume start time.).
                c. When ordered by ordinal values, a succeeding operation volume
                must have either a non-zero volume (3D) intersection OR a positive
                temporal intersection. (Note this is a logical "OR" so it may have
                 both intersection types... i.e. it is not an "exclusive OR").
              5. Each spatial dimension of an op vol's bounding box must have
              length less than 100000ft (should discuss with partners this value).
              This is a sanity check against excessively large volumes. Need to
              be careful here as there may be legitimate use cases wherein large
              volumes are required/allowed, but we want to encourage efficient
              planning and protect against misuse of the shared airspace.
              6. The planned duration of an op vol must be less than 120 minutes. Again,
              need to be careful to not damage legitimate use cases, but need to
              protect against misuse/poor planning. For long duration missions,
              it may be reasonable to have them replan or to have volumes with
              the same geog and long time values that slightly intersect.
              7. The start time of an operation volume other than the first in the
              array must be greater than or equal to the start time of its
              immediately preceding operation volume.
              (note this probalby should be #4 or so, bumping the others down,
              but I didn't want to cause confusion in case implementers are
              referencing these checks somewhere by number.)
          items:
            $ref: "#/components/schemas/OperationVolume"
          x-utm-data-accessibility: OPERATIONAL
    PriorityElements:
      required:
        - priority_level
        - priority_status
      type: object
      properties:
        priority_level:
          $ref: "#/components/schemas/severity"
        priority_status:
          type: string
          description: |-
            If a PUBLIC_SAFETY operation is PUT to any endpoint, the correct scope will be required.
            Any USS may PUT an EMERGENCY_* with non-priority scopes.
            EMERGENCY_AIRBORNE_IMPACT should be used when there is significant risk to other aircraft, but little risk to any people or property on the ground.
            EMERGENCY_GROUND_IMPACT should be used when there is significant risk to people and/or property on the ground, but little risk of airborne collision.
            EMERGENCY_AIR_AND_GROUND_IMPACT should be used when there is significant risk to aircraft AND people/property on the ground.
            NONE should only be used to indicate that an operation that previously had a priority status now has no priority status.
          enum:
            - NONE
            - PUBLIC_SAFETY
            - EMERGENCY_AIRBORNE_IMPACT
            - EMERGENCY_GROUND_IMPACT
            - EMERGENCY_AIR_AND_GROUND_IMPACT
          x-utm-data-accessibility: OPERATIONAL
      description:
        Data elements used to describe the status of priority operation.
        Nominal operations need not include these data. 'priority_status' of PUBLIC_SAFETY
        or INFLIGHT_EMERGENCY accepts 'priority_level' values EMERGENCY, ALERT and
        CRITICAL only. 'priority_status' of NONE accepts 'priority_level' values WARNING,
        NOTICE and INFORMATIONAL only. The 'priority_level' values EMERGENCY, ALERT
        and CRITICAL should be used based on impact to other operations and safety
        of people and property on the ground.
    OperationVolume:
      required:
        - beyond_visual_line_of_sight
        - effective_time_begin
        - effective_time_end
        - max_altitude
        - min_altitude
        - operation_geography
        - ordinal
        - volume_type
      type: object
      properties:
        ordinal:
          maximum: 99999
          exclusiveMaximum: false
          minimum: -1000
          exclusiveMinimum: false
          type: integer
          description:
            This integer represents the ordering of the operation volume
            within the set of operation volumes. Need not be consecutive integers.
            Note that the max and min are larger than the allowed number of op vols.
            This is by design to allow implementers to use this field in a flexible
            manner. For example, in replanning, it may be useful to have a larger
            set of integers available and to space them by large offsets.
          x-utm-data-accessibility: OPERATIONAL
        volume_type:
          type: string
          description: More description later.
          default: ABOV
          enum:
            - TBOV
            - ABOV
          x-utm-data-accessibility: OPERATIONAL
        near_structure:
          type: boolean
          description: Is this operation volume within 400' of a structure?
          default: false
          x-utm-data-accessibility: SAFETY
        operation_geography:
          $ref: "#/components/schemas/Polygon"
        min_altitude:
          $ref: "#/components/schemas/Altitude"
        max_altitude:
          $ref: "#/components/schemas/Altitude"
        effective_time_begin:
          maxLength: 24
          minLength: 24
          pattern: ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$
          type: string
          description: |-
            Earliest time the operation will use the operation volume.  It must be less than effective_time_end.
            effective_time_begin < effective_time_end MUST be true.
          format: date-time
          example: 2015-08-20T14:11:56.118Z
          x-utm-data-accessibility: OPERATIONAL
        effective_time_end:
          maxLength: 24
          minLength: 24
          pattern: ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$
          type: string
          description: |-
            Latest time the operation will done with the operation volume. It must be greater than effective_time_begin.
            effective_time_begin < effective_time_end MUST be true.
          format: date-time
          example: 2015-08-20T14:11:56.118Z
          x-utm-data-accessibility: OPERATIONAL
        actual_time_end:
          maxLength: 24
          minLength: 24
          pattern: ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$
          type: string
          description: |-
            Time that the operational volume was freed for use by other operations.  Should be populated and stored by the USS.
            actual_time_end MUST satisfy:  actual_time_end > effective_time_begin whenever actual_time_end is not null.
          format: date-time
          example: 2015-08-20T14:11:56.118Z
          x-utm-data-accessibility: OPERATIONAL
        conformance_geography:
          $ref: "#/components/schemas/Polygon"
        conformance_min_altitude:
          $ref: "#/components/schemas/Altitude"
        conformance_max_altitude:
          $ref: "#/components/schemas/Altitude"
        conformance_time_begin:
          maxLength: 24
          minLength: 24
          pattern: ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$
          type: string
          description: |-
            Earliest time the operation will use the conformance volume.  It must be less than conformance_time_end.
            conformance_time_begin < conformance_time_end MUST be true.
          format: date-time
          example: 2015-08-20T14:11:56.118Z
          x-utm-data-accessibility: OPERATIONAL
        conformance_time_end:
          maxLength: 24
          minLength: 24
          pattern: ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$
          type: string
          description: |-
            Latest time the operation will done with the conformance volume. It must be greater than effective_time_begin.
            conformance_time_begin < conformance_time_end MUST be true.
          format: date-time
          example: 2015-08-20T14:11:56.118Z
          x-utm-data-accessibility: OPERATIONAL
        protected_geography:
          $ref: "#/components/schemas/Polygon"
        protected_min_altitude:
          $ref: "#/components/schemas/Altitude"
        protected_max_altitude:
          $ref: "#/components/schemas/Altitude"
        protected_time_begin:
          maxLength: 24
          minLength: 24
          pattern: ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$
          type: string
          description: |-
            Earliest time the operation will use the protected volume.  It must be less than protected_time_end.
            protected_time_begin < protected_time_end MUST be true.
          format: date-time
          example: 2015-08-20T14:11:56.118Z
          x-utm-data-accessibility: OPERATIONAL
        protected_time_end:
          maxLength: 24
          minLength: 24
          pattern: ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$
          type: string
          description: |-
            Latest time the operation will done with the protected volume. It must be greater than protected_time_begin.
            protected_time_begin < protected_time_end MUST be true.
          format: date-time
          example: 2015-08-20T14:11:56.118Z
          x-utm-data-accessibility: OPERATIONAL
        beyond_visual_line_of_sight:
          type: boolean
          description:
            Describes whether any portion of the operation volume is beyond
            the visual line of sight of the RPIC.
          x-utm-data-accessibility: OPERATIONAL
    ContingencyPlan:
      required:
        - contingency_cause
        - contingency_id
        - contingency_location_description
        - contingency_polygon
        - contingency_response
        - valid_time_begin
        - valid_time_end
      type: object
      properties:
        contingency_id:
          maximum: 1000
          exclusiveMaximum: false
          minimum: 1
          exclusiveMinimum: false
          type: integer
          description:
            A positive integer unique amongst the set of Contingencies
            for this operation. The integers may be ordered by some scheme, but this
            is not required.
          format: int32
          example: 1
          x-utm-data-accessibility: OPERATIONAL
        contingency_cause:
          type: array
          items:
            type: string
            description: |-
              A cause that necessitates a contingency response. In planning an operation, this array of values represents the various causes that may necessitate the provided contingency response. 1. LOST_C2_UPLINK
                The operation has lost command or control uplink to the vehicle.
              2. LOST_C2_DOWNLINK
                The operation has lost downlinks from the vehicle.
              3. LOST_NAV
                The vehicle no longer has sufficient navigation sources.
              4. LOST_SAA
                The vehicle's sense and avoid solution is no longer reliable.
              5. LOW_FUEL
                The vehicle does not have enough power to complete its mission. Still enough fuel to safely land or potentially return to base.
              6. NO_FUEL
                The vehicle is either completely without fuel or has only enough fuel to land immediately.
              7. MECHANICAL_PROBLEM
                The vehicle is experiencing a mechanical problem necessitating initiation of a contingency response.
              8. SOFTWARE_PROBLEM
                The vehicle or some component of the required platform ground equipment is experiencing a software problem.
              9. ENVIRONMENTAL
                There are conditions in the environment necessitating initiation of a contingency response. Generally these will be weather-related phenomena.
              10. SECURITY
                There is a security incident interrupting this operation.
              11. TRAFFIC
                The density or type of air traffic near the vehicle necessitated a contingency response.
              12. LOST_USS
                The operation has lost at least some portion of expected USS services.
              13. OTHER
                Some cause not captured in any other category.
              14. ANY
                This category should only be used within an operation plan when a particular contingency response is appropriate for any contingency cause.
            example: LOW_FUEL
            enum:
              - LOST_C2_UPLINK
              - LOST_C2_DOWNLINK
              - LOST_NAV
              - LOST_SAA
              - LOW_FUEL
              - NO_FUEL
              - MECHANICAL_PROBLEM
              - SOFTWARE_PROBLEM
              - ENVIRONMENTAL
              - SECURITY
              - TRAFFIC
              - LOST_USS
              - OTHER
              - ANY
            x-utm-data-accessibility: OPERATIONAL
        contingency_response:
          type: string
          description: |-
            The type of contingency response. 1. LANDING
              The operation will be landing by targeting the contingency_polygon.
            2. LOITERING
              The operation will loiter at the contingency_polygon at the specified
              loiter_altitude.
            3. RETURN_TO_BASE
              The operation will return to base as specified by the
              contingency_polygon. The USS may issue an update to the operation plan
              to support this maneuver.
            4. OTHER
              Additional details should be provided in free_text. If this gets
              used often for similar events, API will be updated with new enum
              value.
          example: LANDING
          enum:
            - LANDING
            - LOITERING
            - RETURN_TO_BASE
            - OTHER
          x-utm-data-accessibility: OPERATIONAL
        contingency_polygon:
          $ref: "#/components/schemas/Polygon"
        loiter_altitude:
          $ref: "#/components/schemas/Altitude"
        relative_preference:
          minimum: 0
          type: number
          description:
            Optional numerical value that can be used in ranking the preference
            of this Contingency versus any other within the set of Contingency for
            this operation. This may be thought of as a ranking of the potential landing
            sites with all other factors being held equal, though dynamic conditions
            will likely play a role in adjusting this ranking in real time by the
            USS or Operator.  For example, one Contingency may be significantly further
            from the operation at a given time and, thus, would be less preferred
            than it might be otherwise. Further interpretation of this field is left
            to the operator and USS.
          format: double
          example: 2
          x-utm-data-accessibility: OPERATIONAL
        contingency_location_description:
          type: string
          description: |-
            Description of the contingency location.
            PREPROGRAMMED: location that is determined prior to launch and
              programmed onto the UA
            OPERATOR_UPDATED: location that is (or will be) updated during
              operation by operator (e.g., sent to UA)
            UA_IDENTIFIED: location that is identified to be safe to land by
              the UA itself
            OTHER: location does not fit any of the defined categories
          example: PREPROGRAMMED
          enum:
            - PREPROGRAMMED
            - OPERATOR_UPDATED
            - UA_IDENTIFIED
            - OTHER
          x-utm-data-accessibility: SAFETY
        relevant_operation_volumes:
          type: array
          description:
            In the planning stage of an operation, this array may be populated
            with ordinals that correspond to the ordinal values supplied with each
            OperationVolume. This is an indicator that this particular ContingencyPlan
            is valid for use when the operation is active in any of the particular
            noted OperationVolumes. For example, you may define 1 operation volume
            and 3 different contingency plans specifying the causes that would transition
            the operation into LANDING, LOITERING or RETURN_TO_BASE. See also ContingencyPlan.relevant_preference
            and Operation.contingency_plans.
          items:
            type: integer
            format: int32
          x-utm-data-accessibility: OPERATIONAL
        valid_time_begin:
          maxLength: 24
          minLength: 24
          pattern: ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$
          type: string
          description:
            Time that this location is expected to be first available.
            For example, if an operation begins at 1100, but this location is not
            available until 1105 at the earliest, then this field could indicate that
            fact.
          format: date-time
          example: 2015-08-20T14:11:56.118Z
          x-utm-data-accessibility: OPERATIONAL
        valid_time_end:
          maxLength: 24
          minLength: 24
          pattern: ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$
          type: string
          description:
            Time that this location is expected to become unavailable.
            For example, if an operation begins at 1100, but this location becomes
            closed for some reason at 1105, then this field could indicate that fact.
          format: date-time
          example: 2015-08-20T14:11:56.118Z
          x-utm-data-accessibility: OPERATIONAL
        free_text:
          maxLength: 1000
          minLength: 0
          type: string
          description:
            To be used for additional comments as needed. For human use,
            not for automating any process.
          x-utm-data-accessibility: OPERATIONAL
    Position:
      required:
        - altitude_gps
        - altitude_num_gps_satellites
        - enroute_positions_id
        - gufi
        - hdop_gps
        - location
        - time_measured
        - time_sent
        - track_bearing
        - track_bearing_reference
        - track_bearing_uom
        - track_ground_speed
        - track_ground_speed_units
        - uss_name
        - vdop_gps
      type: object
      properties:
        altitude_gps:
          $ref: "#/components/schemas/Altitude"
        altitude_num_gps_satellites:
          minimum: 0
          exclusiveMinimum: false
          type: integer
          description: Number of satellites used in calculating the altitude.
          format: int32
          x-utm-data-accessibility: SAFETY
        comments:
          maxLength: 1000
          minLength: 0
          type: string
          x-utm-data-accessibility: OPERATIONAL
        enroute_positions_id:
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-4[0-9a-fA-F]{3}\-[8-b][0-9a-fA-F]{3}\-[0-9a-fA-F]{12}$
          type: string
          description:
            Each position will be assigned a UUIDv4 by the USS managing
            the referenced operation.  Any system recieving this position object MUST
            NOT modify this identifier.
          format: uuid
          example: 00000000-0000-4444-8888-feeddeadbeef
          x-utm-data-accessibility: PUBLIC
        gufi:
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-4[0-9a-fA-F]{3}\-[8-b][0-9a-fA-F]{3}\-[0-9a-fA-F]{12}$
          type: string
          description:
            Each operation has an GUFI assigned upon submission. Required
            upon PUTting a new position. It is a JSON string, but conforms to the
            UUID version 4 specification
          format: uuid
          example: 00000000-0000-4444-8888-feeddeadbeef
          x-utm-data-accessibility: PUBLIC
        hdop_gps:
          minimum: 0
          type: number
          description:
            The horizontal dilution of precision as provided by the onboard
            GPS.
          format: double
          x-utm-data-accessibility: SAFETY
        location:
          $ref: "#/components/schemas/Point"
        time_measured:
          maxLength: 24
          minLength: 24
          pattern: ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$
          type: string
          description:
            The time the position was measured. Likely the time provided
            with the GPS position reading. Position time_measured < time_sent MUST
            be true.
          format: date-time
          example: 2015-08-20T14:11:56.118Z
          x-utm-data-accessibility: PUBLIC
        time_sent:
          maxLength: 24
          minLength: 24
          pattern: ^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3})Z$
          type: string
          description:
            The time the position was sent by the USS as measured by that
            USS's system time. Position time_measured <= time_sent MUST be true.
          format: date-time
          example: 2015-08-20T14:11:56.118Z
          x-utm-data-accessibility: OPERATIONAL
        track_bearing:
          maximum: 360
          exclusiveMaximum: true
          minimum: 0
          exclusiveMinimum: false
          type: number
          description:
            The direction of travel relative to track_bearing_reference
            in degrees. Position track_bearing value MUST be >= 0.0 and < 360.0. Note
            that FIXM allows for the value of 360.0, while UTM does not.  The reason
            is for clarity by not allowing two numbers (0.0 and 360.0) to represent
            the same measurement.
          format: double
          xml:
            name: BearingType
            namespace: https://www.fixm.aero/nas/4.1
            prefix: fb
            attribute: false
          x-utm-fixm-reference: https://www.fixm.aero/releases/FIXM-4.1.0/doc/schema_documentation_core/Measures_xsd.html#BearingType
          x-utm-data-accessibility: OPERATIONAL
        track_bearing_reference:
          type: string
          description: |-
            A code indicating the direction of the zero bearing.
            TRUE_NORTH  This value indicates that the direction is relative to True North. MAGNETIC_NORTH  This value indicates that the direction is relative to Magnetic North.
            This field is equivalent to
          xml:
            name: ZeroBearingTypeType
            namespace: https://www.fixm.aero/nas/4.1
            prefix: fb
            attribute: true
          default: TRUE_NORTH
          enum:
            - TRUE_NORTH
            - MAGNETIC_NORTH
          x-utm-fixm-reference: https://www.fixm.aero/releases/FIXM-4.1.0/doc/schema_documentation_core/Measures_xsd.html#BearingType
          x-utm-data-accessibility: OPERATIONAL
        track_bearing_uom:
          type: string
          description: |-
            The reference quantities used to express the value of angles. [ISO 19103, chapter 6.5.7.10]
            As in FIXM, only a single option is provided (degrees). Including this field allows for clarity in the data provided and allows for the potential of other units of measure in the future.
          xml:
            name: UomAngleType
            namespace: https://www.fixm.aero/nas/4.1
            prefix: fb
            attribute: true
          enum:
            - DEG
          x-utm-fixm-reference: https://www.fixm.aero/releases/FIXM-4.1.0/doc/schema_documentation_core/UnitsOfMeasure_xsd.html#UomAngleType
          x-utm-data-accessibility: OPERATIONAL
        track_ground_speed:
          minimum: 0
          exclusiveMinimum: false
          type: number
          description:
            Ground speed int the direction of travel, in units as specifed
            by track_ground_speed_units. Position track_ground_speed MUST be >= 0.0.
          format: double
          x-utm-data-accessibility: OPERATIONAL
        track_ground_speed_units:
          type: string
          description: |-
            The reference quantities used to express the value of ground speed as provided in track_ground_speed.
            KT: Knots.
            FIXM allows KT (knots) and KM_H (kilometers per hour) but we only allow the KT choice.
          xml:
            name: UomGroundSpeedType
            namespace: https://www.fixm.aero/nas/4.1
            prefix: fb
            attribute: true
          enum:
            - KT
          x-utm-fixm-reference: https://www.fixm.aero/releases/US_Ext-4.2.0/doc/schema_documentation_us_extension/UnitsOfMeasure_xsd.html#UomGroundSpeedType
          x-utm-data-accessibility: OPERATIONAL
        uss_name:
          maxLength: 250
          minLength: 4
          type: string
          description:
            The name of the entity providing UAS Support Services. Populated
            by the service discovery system based on credential information provided
            by the USS. The maximum and minimum character length is based on a usable
            domain name, and considering the maximum in RFC-1035.
          x-utm-data-accessibility: OPERATIONAL
        discovery_reference:
          maxLength: 36
          minLength: 5
          type: string
          description: |-
            An identifier that supplies information about the USS from the discovery perspecitve.  This field is currently vague due to research on the appropriate discovery approach.  It will be tightened when an operational system decides on the approach to discovery.
            For Gridded USS Discovery, this should be an x,y,z string where x and y are the coords of the grid and z is the zoom level.  For example:  "110,117,10"
            For FIMS Discovery, this should be the uss_instance_id which is a UUID.
          example: 110,117,10
          x-utm-data-accessibility: OPERATIONAL
        vdop_gps:
          minimum: 0
          type: number
          description:
            The vertical dilution of precision as provided by the onboard
            GPS.
          format: double
          x-utm-data-accessibility: SAFETY
      example:
        altitude_gps:
          altitude_value: 1239.77
          vertical_reference: W84
          units_of_measure: FT
          source: ONBOARD_SENSOR
        altitude_num_gps_satellites: 22
        enroute_positions_id: d10cd900-086f-43c7-9d6c-BAADCAFEF00D
        gufi: 00000000-0000-4444-8888-000000000000
        hdop_gps: 1.117
        time_measured: 2016-10-04T09:15:40.727Z
        time_sent: 2016-10-04T09:15:40.727Z
        track_bearing: 33.44
        track_bearing_reference: MAGNETIC_NORTH
        track_bearing_uom: DEG
        track_ground_speed: 33.33
        track_ground_speed_units: KT
        uss_name: uss.provider321.net
        vdop_gps: 0.932
        location:
          type: Point
          coordinates:
            - -122.05635935068132
            - 37.41436490284069
    severity:
      type: string
      description: |-
        The severity level of a UTMMessage. This severity labeling may be used by other components within UTM as well.  The labels are ordered such that they may be given priority handling by software systems and human users. **EMERGENCY > ALERT > CRITICAL > WARNING > NOTICE > INFORMATIONAL** In relation to a UTMMessage, the severities may be interpreted as follows. 1. **EMERGENCY**
          There is an *immediate* impact to the safety of other air operations,
          the safety of people, or the safety of structures on the ground.
          Actions to mitigate required by other operations.
        2. **ALERT**
          There may be an impact to the safety of other air operations, the
          safety of people, or the safety of structures on the ground. Actions to
          mitigate required by other operations.
        3. **CRITICAL**
          Without mitigations by the affected operation, the situation may rise to
           an emergency in the near future.
        4. **WARNING**
          There is a contained issue that may result in the loss of aircraft. No
          immediate or likely effect to other operations, people on the ground,
          or structures.
        5. **NOTICE**
          This issue is provided for situational awareness. Planning by operators
          and USSs may be affected.
        6. **INFORMATIONAL**
            This issue is provided for situational awareness.

        Note that this approach leverages RFC 5424: "The Syslog Protocol." By taking this approach, there is the possibility of formalizing UTMMessaging with more elements of the RFC to allow for compatibility with other logging systems. https://tools.ietf.org/html/rfc5424
      enum:
        - EMERGENCY
        - ALERT
        - CRITICAL
        - WARNING
        - NOTICE
        - INFORMATIONAL
    PersonOrOrganization:
      required:
        - email_addresses
        - name
        - phone_numbers
      type: object
      properties:
        name:
          maxLength: 60
          minLength: 1
          type: string
          description:
            The full official name of the Person, State, Organisation,
            Authority, aircraft operating agency, handling agency etc. [FIXM]
          externalDocs:
            description: See FIXM 4.1.0 for further information.
            url: https://www.fixm.aero/releases/FIXM-4.1.0/doc/schema_documentation_core/Types_xsd.html#TextNameType
          xml:
            name: TextNameType
            namespace: https://www.fixm.aero/nas/4.1
            prefix: fb
            attribute: true
        email_addresses:
          maxItems: 5
          minItems: 1
          type: array
          description: |-
            An array of email addresses. To establish best practices, the order of the email addresses in the array should indicate the order that they should be used.
            Note that we do not include a regular expression for email addresses. Such a RE is quite unweildy if it attempts to be complete.
            The responsibility is on the USS providing the email address to ensure it is valid and operational.
            Several sources on the Internet can be found discussing email REs.
            Limiting email length to 254 per well-supported discussion here:
              https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address
          items:
            maxLength: 254
            type: string
            format: email
            externalDocs:
              description: See FIXM 4.1.0 for further information.
              url: https://www.fixm.aero/releases/FIXM-4.1.0/doc/schema_documentation_core/Address_xsd.html#OnlineContactType
            xml:
              name: OnlineContactType
              namespace: https://www.fixm.aero/nas/4.1
              prefix: fb
              attribute: true
        phone_numbers:
          maxItems: 5
          minItems: 1
          type: array
          description:
            An array of phone numbers. To establish best practices, the
            order of the phone numbers in the array should indicate the order that
            they should be used.
          items:
            maxLength: 500
            minLength: 1
            pattern: (\+)?[0-9\s\-\(\)]+
            type: string
            format: phone-number
            externalDocs:
              description: See FIXM 4.1.0 for further information.
              url: https://www.fixm.aero/releases/FIXM-4.1.0/doc/schema_documentation_core/Address_xsd.html#TextPhoneType
            xml:
              name: TextPhoneType
              namespace: https://www.fixm.aero/nas/4.1
              prefix: fb
              attribute: true
        comments:
          maxLength: 1000
          minLength: 1
          type: string
          description:
            Any additional coments related to contact information. Optional.
            May not have a clean FIXM equivalent, but may be useful in some UTM contexts.
      description:
        'From FIXM 4.1: "An identifiable, responsible entity that can be
        either a natural person or an organization."'
      externalDocs:
        description: See FIXM 4.1.0 for further information.
        url: https://www.fixm.aero/releases/FIXM-4.1.0/doc/schema_documentation_core/Organization_xsd.html#PersonOrOrganizationType
      xml:
        name: PersonOrOrganizationType
        namespace: https://www.fixm.aero/nas/4.1
        prefix: fb
        attribute: false
    Altitude:
      required:
        - altitude_value
        - units_of_measure
        - vertical_reference
      type: object
      properties:
        altitude_value:
          maximum: 100000
          exclusiveMaximum: false
          minimum: -8000
          exclusiveMinimum: false
          type: number
          description:
            The numeric value of the altitude. Note that min and max values
            are added as a sanity check. As use cases evolve and more options are
            made available in terms of units of measure or reference systems, these
            bounds should be re-evaluated.
          format: double
        vertical_reference:
          type: string
          description: |-
            A code indicating the reference for a vertical distance. See AIXM 5.1 and FIXM 4.1.0.
            Currently, UTM only allows WGS84 with no immediate plans to allow other options. FIXM and AIXM allow for 'SFC' which is equivalent to AGL.
          externalDocs:
            description: See FIXM 4.1.0 for further information.
            url: https://www.fixm.aero/releases/FIXM-4.1.0/doc/schema_documentation_core/Measures_xsd.html#VerticalReferenceType
          xml:
            name: VerticalReferenceType
            namespace: https://www.fixm.aero/nas/4.1
            prefix: fb
            attribute: false
          enum:
            - W84
        units_of_measure:
          type: string
          description: |-
            The reference quantities used to express the value of altitude. See FIXM 4.1.
            Currently, UTM only allows feet with no immediate plans to allow other options.  FIXM allows for feet or meters.
          externalDocs:
            description: See FIXM 4.1.0 for further information.
            url: https://www.fixm.aero/releases/FIXM-4.1.0/doc/schema_documentation_core/UnitsOfMeasure_xsd.html#UomHeightType
          xml:
            name: UomHeightType
            namespace: https://www.fixm.aero/nas/4.1
            prefix: fb
            attribute: false
          enum:
            - FT
        source:
          type: string
          description:
            Experimental field for testing and discussion to determine
            applicability.
          enum:
            - ONBOARD_SENSOR
            - OTHER
    Point:
      type: object
      properties:
        type:
          type: string
          description: |
            The type of Geometry. In this case, must be 'Point' per GeoJSON spec.
          enum:
            - Point
        coordinates:
          maxItems: 2
          minItems: 2
          type: array
          example:
            - 0.0
            - 0.0
          items:
            type: number
            format: double
      description: GeoJSon Point, limited to 2D.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.2
    Polygon:
      required:
        - coordinates
        - type
      type: object
      properties:
        type:
          type: string
          description: |
            The type of Geometry. In this case, must be 'Polygon' per GeoJSON
            spec.  Note that the "coordinates" member is validated to be be an
            array of size one. This implies there are no interior rings allowed
            currently.
          enum:
            - Polygon
        coordinates:
          maxItems: 1
          minItems: 1
          type: array
          description: |-
            The number of polygons allowed.  Currently 1, implying no interior rings.  If this number is changes, the maxItems should be considered.
            From RFC7946: o  For type "Polygon", the "coordinates" member MUST be an array of linear ring coordinate arrays.
            o  For Polygons with more than one of these rings, the first MUST be the exterior ring, and any others MUST be interior rings.  The exterior ring bounds the surface, and the interior rings (if present) bound holes within the surface.
            Again, note we only allow a single set of coordinates, implying no interior rings.
          items:
            maxItems: 100
            minItems: 4
            type: array
            description: |-
              The number of vertices in this polygon. From RFC7946:
                o  A linear ring is a closed LineString with four or more positions.

                o  The first and last positions are equivalent, and they MUST contain
                identical values; their representation SHOULD also be identical.

                o  A linear ring is the boundary of a surface or the boundary of a
                hole in a surface.

                o  A linear ring MUST follow the right-hand rule with respect to the
                area it bounds, i.e., exterior rings are counterclockwise, and
                holes are clockwise.  (also in the spec:  parsers SHOULD NOT reject
                Polygons that do not follow the right-hand rule.)

                https://tools.ietf.org/html/rfc7946#section-3.1.6
            items:
              maxItems: 2
              minItems: 2
              type: array
              description:
                The actual coordinates for a vertex of the linear ring.  Note
                that UTM does not allow additional elements other than long and lat
                in this array.
              items:
                type: number
                format: double
      description: GeoJSon Polygon. Positions all 2D.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.6
    UasRegistration:
      required:
        - registration_id
        - registration_location
      type: object
      properties:
        registration_id:
          maxLength: 36
          minLength: 36
          pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-4[0-9a-fA-F]{3}\-[8-b][0-9a-fA-F]{3}\-[0-9a-fA-F]{12}$
          type: string
          description:
            A unique registration identifier, minted by the registration
            authority as a UUIDv4.
          format: uuid
          example: 00000000-0000-4444-8888-feeddeadbeef
        registration_location:
          type: string
          description:
            An Internet-reachable URL for the registration authority. More
            details to come, however, it is thought that this should be an endpoint
            allowing an unauthenticated GET to obtain metadata about the registrar.
          format: url
      description:
        A set of data describing the registration of the UAS that is to
        be used in an Operation.
    OperResponse:
      type: object
      properties:
        http_status_code:
          type: string
        msg:
          type: string
        uri:
          type: string
        url:
          type: string
        violationMap:
          type: object
          properties: {}
